<?xml version="1.0" encoding="UTF-8"?>
<!--Version 2.3 of the Customer Basic Data Configuration File -->
<erpConnector>
	<sections>
		<section name="PerformInterface">
		
		</section>
		
		<section name="ExchangeFromCEB">

			<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			WebService from Central European Bank to get Exchange Rates
			Documentation can be found at https://exchangeratesapi.io/
			++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

			<method name="InitializeBaswareXML" jumpToXPath="//section[@name='InitializeBaswareXML']">
				<parameter name="debug">{v,ObjectDebug}</parameter>
			</method>
			
			<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			Get Unique Organization Currencies (Base Currencies)
			++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
			<method name="GetOrganizationCurrencies">
				<builtInMethodParameterList name="bw_db_functions"  driver="provider">
					<parameter name="connectionstring">{v,connstr}</parameter>
					<parameter name="dataProvider">{v,dataprovider}</parameter>
					<parameter name="assemblyName">{v,assemblyname}</parameter>
					<parameter name="command"><![CDATA[
					SELECT DISTINCT
						adm_organization_element.code AS org_code,
						adm_organization_element.currency AS org_currency
						FROM adm_organization_element
						WHERE adm_organization_element.currency IS NOT NULL
					]]></parameter>
					<parameter name="tablename">BaseCurrencies</parameter>
					<return name="BaseCurrencies"/>
				</builtInMethodParameterList>
			</method>

			<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			Get Active Currencies
			++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
			<method name="ActiveCurrencies">
				<builtInMethodParameterList name="bw_db_functions"  driver="provider">
					<parameter name="connectionstring">{v,connstr}</parameter>
					<parameter name="dataProvider">{v,dataprovider}</parameter>
					<parameter name="assemblyName">{v,assemblyname}</parameter>
					<parameter name="command"><![CDATA[
					SELECT DISTINCT
						adm_currency.code AS from_currency
						FROM adm_currency
						WHERE adm_currency.is_active = 1						
					]]></parameter>
					<parameter name="tablename">ActiveCurrencies</parameter>
					<return name="ActiveCurrencies"/>
				</builtInMethodParameterList>
			</method>
			
			<onError onErrorJumpToXPath="//section[@name='errorHandler']" resume="true">
				
				<section name='LoopBaseCurrencies'  loopDataSource='BaseCurrencies'>
				
					<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
					Create the URI for the WebService 
					++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
					<variable name="InterfaceUri"><![CDATA[https://api.exchangeratesapi.io/latest?base=]]>{BaseCurrencies,org_currency}</variable>

					<variable name="requestXML"></variable>
					<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
					Send request XML to Webservice and load response into data source
					++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
					<section name="CallWebservice" jumpToXPath="//section[@name='GenericWebserviceRequest']" />
					
					<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
					Load Response in JSON Data Source
					++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
					<method name="LoadJSONFile">
						<builtInMethodParameterList name="bw_json_input">
							<parameter name="JsonSource">{v,response}</parameter>
							<return name="JSONData"/> 
						</builtInMethodParameterList>
					</method>
					
					<variable name="InputString" include='{v,RequestDebug}'>{F,GETNODE(JSONData;".")}</variable>

					<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
					Create Basware XML Structure
					++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
					<section name='CreateBaswareExchangeXML' loopDataSource="ActiveCurrencies">
						
						<variable name='Rate'>1</variable>
						<variable name='Rate' include='{F,EVAL(ActiveCurrencies,from_currency;=;BaseCurrencies,org_currency;False;True)}'>{F,CALC(1;/;F,GETDATA(JSONData;F,COMBINE("/rates/";ActiveCurrencies,from_currency)))}</variable>

						<method name="CurrencyXML" jumpToXPath="//section[@name='CurrencyXML']">
							<parameter name="debug">{v,ObjectDebug}</parameter>
							<parameter name="Company">{BaseCurrencies,org_code}</parameter>
							<parameter name="Currency_Code_From">{ActiveCurrencies,from_currency}</parameter>
							<parameter name="Currency_Code_To">{BaseCurrencies,org_currency}</parameter>
							<parameter name="Valid_From">{F,GETDATA(JSONData;"/date")}</parameter>
							<parameter name="Rate">{v,Rate}</parameter>
						</method>
						
					</section>
					
					<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
					Clear data sources
					++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
					<removeTable>response</removeTable>
				</section>
				
				
				<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				Write created standard Basware XML to disk in the inbound folder
				++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
				<method name="SaveBaswareXML" jumpToXPath="//section[@name='SaveBaswareXML']">
					<parameter name="debug">{v,ObjectDebug}</parameter>
					<parameter name="path">{v,PATH}\{v,FILENAME}</parameter>
				</method>
				
				
			</onError>
			
		</section>

		<section name="GenericWebserviceRequest">
			<!-- Call web service -->			
			<method name="CallCCWebservice">
				<builtInMethodParameterList name="bw_ws_function">
					<parameter name="uri">{v,InterfaceUri}</parameter>
					<return name="response" />
				</builtInMethodParameterList>
			</method>
		</section>

		<section name="errorHandler">
			<!-- we can put some logic here if we want to send out e-mail notifications or something for error handling -->
			<variable name="ErrorHappened">True</variable> 
			<!-- write request to disk //optional -->
			<output type="Basware.ErpConnector.OutputResource.TextOutputResource">
				<parameter name="path">{v,PATH}\Backup\ERROR_{v,interface}_{F,NOW(),"yyyyMMddHHmmss"}.xml</parameter>
				<parameter name="append">false</parameter>
				<outputCommands>
					<command>{v,response}</command>
				</outputCommands>
			</output>
		</section>
		
		<section name="InitializeXML" log="{F,EVAL(F,EXISTS(p;debug);=;1;F,EVAL(F,UPPER(p,debug);=;&quot;TRUE&quot;;True;False);False)}">

			<variable name="XMLHeader"><![CDATA[<?xml version="1.0" encoding="utf-8"?>]]></variable>
			<variable name="XMLHeaderTag"><![CDATA[<DocumentElement></DocumentElement>]]></variable>

			<clearTable>BaswareXML</clearTable>

			<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			Create initial XML structure
			++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
			<output type="BasWare.ErpConnector.OutputResource.XmlTableOutputResource">
				<parameter name="tablename">BaswareXML</parameter>
				<outputCommands>
					<command type="fragment">{v,XMLHeader}{v,XMLHeaderTag}</command>
				</outputCommands>
			</output>
		
		</section>
		

		<section name='CurrencyXML' log="{F,EVAL(F,EXISTS(p;debug);=;1;F,EVAL(F,UPPER(p,debug);=;&quot;TRUE&quot;;True;False);False)}">
		
			<message type="softexception" category="Configuration" include="{F,EVAL(F,EXISTS(p;Company);=;1;False;True)}">Error: The mandatory parameter "Company" is missing.</message>
			<message type="softexception" category="Configuration" include="{F,EVAL(F,EXISTS(p;Currency_Code_From);=;1;False;True)}">Error: The mandatory parameter "Currency_Code_From" is missing.</message>
			<message type="softexception" category="Configuration" include="{F,EVAL(F,EXISTS(p;Currency_Code_To);=;1;False;True)}">Error: The mandatory parameter "Currency_Code_To" is missing.</message>
			<message type="softexception" category="Configuration" include="{F,EVAL(F,EXISTS(p;Valid_From);=;1;False;True)}">Error: The mandatory parameter "Valid_From" is missing.</message>
			<message type="softexception" category="Configuration" include="{F,EVAL(F,EXISTS(p;Rate);=;1;False;True)}">Error: The mandatory parameter "Rate" is missing.</message>
		
			<variable name="AddItemTag">{F,ADDXML(BaswareXML;"//DocumentElement[last()]";"&lt;Item/&gt;")}</variable>
			
			<variable name="AddCompanyTag">{F,ADDXML(BaswareXML;"//DocumentElement/Item[last()]";"&lt;Company&gt;&lt;/Company&gt;")}</variable>
			<variable name="AddCompanyValue">{F,ADDXML(BaswareXML;"//DocumentElement/Item[last()]/Company[last()]";p,Company)}</variable>
			
			<variable name="AddCurrencyFromTag">{F,ADDXML(BaswareXML;"//DocumentElement/Item[last()]";"&lt;Currency_Code_From&gt;&lt;/Currency_Code_From&gt;")}</variable>
			<variable name="AddCurrencyFromValue">{F,ADDXML(BaswareXML;"//DocumentElement/Item[last()]/Currency_Code_From[last()]";p,Currency_Code_From)}</variable>
			
			<variable name="AddCurrencyToTag">{F,ADDXML(BaswareXML;"//DocumentElement/Item[last()]";"&lt;Currency_Code_To&gt;&lt;/Currency_Code_To&gt;")}</variable>
			<variable name="AddCurrencyToValue">{F,ADDXML(BaswareXML;"//DocumentElement/Item[last()]/Currency_Code_To[last()]";p,Currency_Code_To)}</variable>

			<variable name="AddValidFromTag">{F,ADDXML(BaswareXML;"//DocumentElement/Item[last()]";"&lt;Valid_From&gt;&lt;/Valid_From&gt;")}</variable>
			<variable name="AddValidFromValue">{F,ADDXML(BaswareXML;"//DocumentElement/Item[last()]/Valid_From[last()]";p,Valid_From,"yyyy-MM-dd")}</variable>

			<variable name="AddRateTag">{F,ADDXML(BaswareXML;"//DocumentElement/Item[last()]";"&lt;Rate&gt;&lt;/Rate&gt;")}</variable>
			<variable name="AddRateValue">{F,ADDXML(BaswareXML;"//DocumentElement/Item[last()]/Rate[last()]";p,Rate)}</variable>
		</section>

		
		<section name='SaveBaswareXML' log="{F,EVAL(F,EXISTS(p;debug);=;1;F,EVAL(F,UPPER(p,debug);=;&quot;TRUE&quot;;True;False);False)}">

			<message type="softexception" category="Configuration" include="{F,EVAL(F,EXISTS(p;path);=;1;False;True)}">Error: The mandatory parameter "path" is missing.</message>

			<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			Write created standard Basware XML to disk in the inbound folder
			++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
			<output type="Basware.ErpConnector.OutputResource.TextOutputResource">
				<parameter name="path">{p,path}</parameter>
				<parameter name="append">false</parameter>
				<outputCommands>
					<command>{v,XMLHeader}{F,GETNODE(BaswareXML;".")}</command>
				</outputCommands>
			</output>
			
			<removeTable>BaswareXML</removeTable>

		</section>
		
		
		
	</sections>
</erpConnector>



